@page
@model IndexModel
@{
    ViewData["Title"] = "D&D Adventure";
}

<div class="container mt-4">
    <div class="text-center mb-5">
        <h1 class="display-4">D&D Choose Your Adventure</h1>
        <p class="lead">Create your character, choose your world, and begin your adventure!</p>
    </div>

    <!-- World Selection -->
    <div id="world-selection" class="mb-5">
        <h2>Select Your World</h2>
        <div class="row">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="world-select" class="form-label">Choose World</label>
                            <select class="form-select" id="world-select" required>
                                <option value="" selected disabled>Select a World</option>
                                <option value="new">Create New World</option>
                                <!-- Existing worlds will be populated via JavaScript -->
                            </select>
                        </div>
                        
                        <!-- New World Form (initially hidden) -->
                        <div id="new-world-form" style="display: none;">
                            <div class="mb-3">
                                <label for="world-name" class="form-label">World Name</label>
                                <input type="text" class="form-control" id="world-name" required>
                            </div>
                            <div class="mb-3">
                                <label for="world-description" class="form-label">World Description</label>
                                <textarea class="form-control" id="world-description" rows="3"></textarea>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">World Details</h5>
                    </div>
                    <div class="card-body">
                        <div id="world-info">
                            <p class="text-muted">Select a world to view details</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Import/Export -->
    <div id="import-export" class="mb-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Import/Export Data</h5>
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <div class="input-group">
                            <input type="file" class="form-control" id="import-file" accept=".json">
                            <button class="btn btn-primary" type="button" id="btn-import">Import</button>
                        </div>
                    </div>
                    <div class="col-md-6 text-end">
                        <button type="button" class="btn btn-secondary" id="btn-export">Export Current Data</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Character Creation -->
    <div id="character-creation" class="mb-5">
        <h2>Create Your Character</h2>
        <form id="character-form" class="row g-3">
            <div class="col-md-6">
                <label for="name" class="form-label">Character Name</label>
                <input type="text" class="form-control" id="name" required>
            </div>
            <div class="col-md-3">
                <label for="race" class="form-label">Race</label>
                <select class="form-select" id="race" required>
                    <option value="" selected disabled>Select Race</option>
                    <option value="Human">Human</option>
                    <option value="Elf">Elf</option>
                    <option value="Dwarf">Dwarf</option>
                    <option value="Halfling">Halfling</option>
                </select>
            </div>
            <div class="col-md-3">
                <label for="class" class="form-label">Class</label>
                <select class="form-select" id="class" required>
                    <option value="" selected disabled>Select Class</option>
                    <option value="Warrior">Warrior</option>
                    <option value="Mage">Mage</option>
                    <option value="Rogue">Rogue</option>
                    <option value="Cleric">Cleric</option>
                </select>
            </div>
            
            <!-- Attribute Preview -->
            <div class="col-12 mt-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Character Preview</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6>Base Attributes</h6>
                                <ul class="list-group" id="attribute-preview">
                                    <li class="list-group-item d-flex justify-content-between">
                                        <span>Strength</span>
                                        <span id="str-value">10</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between">
                                        <span>Dexterity</span>
                                        <span id="dex-value">10</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between">
                                        <span>Constitution</span>
                                        <span id="con-value">10</span>
                                    </li>
                                </ul>
                            </div>
                            <div class="col-md-6">
                                <h6>Starting Equipment</h6>
                                <ul class="list-group" id="equipment-preview">
                                    <li class="list-group-item text-muted">Select a class to view starting equipment</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>

    <!-- Action Buttons -->
    <div class="row">
        <div class="col-12 text-center">
            <button type="button" class="btn btn-secondary me-2" id="btn-export">Export to JSON</button>
            <button type="submit" class="btn btn-primary" id="btn-begin">Begin Adventure</button>
        </div>
    </div>
</div>

<div id="adventure" class="mt-4" style="display: none;">
    <!-- Add a Map tab to the adventure interface -->
    <ul class="nav nav-tabs" id="adventureTabs" role="tablist">
        <li class="nav-item">
            <button class="nav-link active" id="adventure-tab" data-bs-toggle="tab" data-bs-target="#adventure-content" type="button">Adventure</button>
        </li>
        <li class="nav-item">
            <button class="nav-link" id="map-tab" data-bs-toggle="tab" data-bs-target="#map-content" type="button">Map</button>
        </li>
        <li class="nav-item">
            <button class="nav-link" id="character-tab" data-bs-toggle="tab" data-bs-target="#character-content" type="button">Character</button>
        </li>
    </ul>

    <div class="tab-content" id="adventureTabsContent">
        <!-- Adventure Tab (existing content) -->
        <div class="tab-pane fade show active" id="adventure-content" role="tabpanel">
            <div class="row">
                <div class="col-md-8">
                    <div class="card">
                <div class="card-body">
                            <div id="description" class="mb-4"></div>
                            <div id="choices"></div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header">
                            <h5 id="char-name"></h5>
            </div>
                        <div class="card-body">
                            <div id="char-details" class="mb-3"></div>
                            <h6>Attributes</h6>
                            <ul id="char-attributes" class="list-group mb-3"></ul>
                            <h6>Inventory</h6>
                            <ul id="char-inventory" class="list-group"></ul>
        </div>
    </div>
</div>
            </div>
        </div>

        <!-- Map Tab (new content) -->
        <div class="tab-pane fade" id="map-content" role="tabpanel">
            <div class="row">
                <div class="col-md-8">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 id="map-name">Current Map</h5>
                            <div>
                                <button id="btn-map-north" class="btn btn-sm btn-outline-primary">North</button>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="row mb-3">
                                <div class="col d-flex justify-content-center">
                                    <button id="btn-map-west" class="btn btn-outline-primary me-2">West</button>
                                    <pre id="map-display" class="bg-light p-3 rounded" style="font-family: monospace;"></pre>
                                    <button id="btn-map-east" class="btn btn-outline-primary ms-2">East</button>
                                </div>
                            </div>
                            <div class="d-flex justify-content-center">
                                <button id="btn-map-south" class="btn btn-sm btn-outline-primary">South</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header">
                            <h5>Location Info</h5>
                        </div>
                        <div class="card-body">
                            <div id="location-info" class="mb-3"></div>
                            <h6>Points of Interest</h6>
                            <div id="poi-list"></div>
                            <div id="poi-actions" class="mt-3"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Character Tab (expanded character details) -->
        <div class="tab-pane fade" id="character-content" role="tabpanel">
            <!-- Character tab content would go here -->
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const apiBaseUrl = '@Model.ApiBaseUrl';
        let gameStateId = '';
        let character = null;
        
        // World selection handling
        const worldSelect = document.getElementById('world-select');
        const newWorldForm = document.getElementById('new-world-form');
        const worldInfo = document.getElementById('world-info');
        
        // Character creation handling
        const characterForm = document.getElementById('character-form');
        const raceSelect = document.getElementById('race');
        const classSelect = document.getElementById('class');
        
        // Load available worlds
        async function loadWorlds() {
            try {
                const response = await fetch(`${apiBaseUrl}/api/world/available`);
                const worlds = await response.json();
                
                worlds.forEach(world => {
                    const option = document.createElement('option');
                    option.value = world.id;
                    option.textContent = world.name;
                    worldSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading worlds:', error);
            }
        }
        
        // Handle world selection change
        worldSelect.addEventListener('change', async (e) => {
            const selectedValue = e.target.value;
            newWorldForm.style.display = selectedValue === 'new' ? 'block' : 'none';
            
            if (selectedValue !== 'new' && selectedValue !== '') {
                try {
                    const response = await fetch(`${apiBaseUrl}/api/world/${selectedValue}`);
                    const worldDetails = await response.json();
                    
                    worldInfo.innerHTML = `
                        <h6>${worldDetails.name}</h6>
                        <p>${worldDetails.description}</p>
                        <small class="text-muted">Created: ${new Date(worldDetails.createdAt).toLocaleDateString()}</small>
                        <hr>
                        <div class="mt-2">
                            <strong>Active Characters:</strong> ${worldDetails.characters.length}<br>
                            <strong>Available Quests:</strong> ${Object.keys(worldDetails.quests).length}<br>
                            <strong>Locations:</strong> ${Object.keys(worldDetails.locations).length}
                        </div>
                    `;
                } catch (error) {
                    console.error('Error loading world details:', error);
                }
            }
        });
        
        // Update attribute preview based on race selection
        raceSelect.addEventListener('change', (e) => {
            const race = e.target.value;
            const baseStr = 10;
            const baseDex = 10;
            const baseCon = 10;
            
            // Apply racial bonuses
            switch (race) {
                case 'Human':
                    document.getElementById('str-value').textContent = baseStr + 1;
                    document.getElementById('dex-value').textContent = baseDex + 1;
                    document.getElementById('con-value').textContent = baseCon + 1;
                    break;
                case 'Elf':
                    document.getElementById('str-value').textContent = baseStr;
                    document.getElementById('dex-value').textContent = baseDex + 2;
                    document.getElementById('con-value').textContent = baseCon;
                    break;
                case 'Dwarf':
                    document.getElementById('str-value').textContent = baseStr + 1;
                    document.getElementById('dex-value').textContent = baseDex;
                    document.getElementById('con-value').textContent = baseCon + 2;
                    break;
                case 'Halfling':
                    document.getElementById('str-value').textContent = baseStr;
                    document.getElementById('dex-value').textContent = baseDex + 2;
                    document.getElementById('con-value').textContent = baseCon;
                    break;
            }
        });
        
        // Update equipment preview based on class selection
        classSelect.addEventListener('change', (e) => {
            const characterClass = e.target.value;
            const equipmentList = document.getElementById('equipment-preview');
            
            let equipment = [];
            switch (characterClass) {
                case 'Warrior':
                    equipment = ['Longsword', 'Shield', 'Chain Mail', 'Explorer\'s Pack'];
                    break;
                case 'Mage':
                    equipment = ['Staff', 'Spellbook', 'Component Pouch', 'Scholar\'s Pack'];
                    break;
                case 'Rogue':
                    equipment = ['Shortsword', 'Leather Armor', 'Thieves\' Tools', 'Burglar\'s Pack'];
                    break;
                case 'Cleric':
                    equipment = ['Mace', 'Scale Mail', 'Holy Symbol', 'Priest\'s Pack'];
                    break;
            }
            
            equipmentList.innerHTML = equipment.map(item => 
                `<li class="list-group-item">${item}</li>`
            ).join('');
        });
        
        // Export character and world data to JSON
        document.getElementById('btn-export').addEventListener('click', async () => {
            const characterData = {
                name: document.getElementById('name').value,
                race: document.getElementById('race').value,
                class: document.getElementById('class').value,
                attributes: {
                    Strength: parseInt(document.getElementById('str-value').textContent),
                    Dexterity: parseInt(document.getElementById('dex-value').textContent),
                    Constitution: parseInt(document.getElementById('con-value').textContent)
                }
            };
            
            const worldId = worldSelect.value;
            
            try {
                const response = await fetch(`${apiBaseUrl}/api/game/export`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        character: characterData,
                        worldId: worldId === 'new' ? null : worldId,
                        newWorld: worldId === 'new' ? {
                            name: document.getElementById('world-name').value,
                            description: document.getElementById('world-description').value
                        } : null
                    })
                });
                
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'dnd-adventure-export.json';
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
            } catch (error) {
                console.error('Error exporting data:', error);
                alert('Failed to export data. See console for details.');
            }
        });
        
        // Initialize
        loadWorlds();
        
        document.getElementById('character-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // Create character object
            const charData = {
                id: crypto.randomUUID(),
                name: document.getElementById('name').value,
                race: document.getElementById('race').value,
                class: document.getElementById('class').value,
                level: 1,
                attributes: {
                    "Strength": 10,
                    "Dexterity": 10,
                    "Constitution": 10,
                    "Intelligence": 10,
                    "Wisdom": 10,
                    "Charisma": 10
                },
                inventory: [],
                healthPoints: 10,
                maxHealthPoints: 10
            };
            
            // Adjust attributes based on race
            if (charData.race === 'Human') {
                Object.keys(charData.attributes).forEach(key => {
                    charData.attributes[key] += 1;
                });
            } else if (charData.race === 'Elf') {
                charData.attributes.Dexterity += 2;
                charData.attributes.Intelligence += 1;
            } else if (charData.race === 'Dwarf') {
                charData.attributes.Constitution += 2;
                charData.attributes.Strength += 1;
            } else if (charData.race === 'Halfling') {
                charData.attributes.Dexterity += 2;
                charData.attributes.Charisma += 1;
            }
            
            // Calculate HP based on class
            if (charData.class === 'Warrior') {
                charData.maxHealthPoints = 12 + Math.floor((charData.attributes.Constitution - 10) / 2);
            } else if (charData.class === 'Mage') {
                charData.maxHealthPoints = 6 + Math.floor((charData.attributes.Constitution - 10) / 2);
            } else if (charData.class === 'Rogue') {
                charData.maxHealthPoints = 8 + Math.floor((charData.attributes.Constitution - 10) / 2);
            } else if (charData.class === 'Cleric') {
                charData.maxHealthPoints = 10 + Math.floor((charData.attributes.Constitution - 10) / 2);
            }
            
            charData.healthPoints = charData.maxHealthPoints;
            
            // Create new game
            try {
                const response = await fetch(`${apiBaseUrl}/api/game/create`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(charData)
                });
                
                if (!response.ok) {
                    throw new Error('Failed to create game');
                }
                
                const gameState = await response.json();
                gameStateId = gameState.id;
                character = charData;
                
                // Hide character creation, show adventure
                document.getElementById('character-creation').style.display = 'none';
                document.getElementById('adventure').style.display = 'block';
                
                // Load first node
                await loadCurrentNode();
                updateCharacterPanel();
            } catch (error) {
                console.error('Error creating game:', error);
                alert('Failed to create game. See console for details.');
            }
        });
        
        async function loadCurrentNode() {
            try {
                const response = await fetch(`${apiBaseUrl}/api/game/${gameStateId}/node`);
                
                if (!response.ok) {
                    throw new Error('Failed to load adventure node');
                }
                
                const node = await response.json();
                
                // Update UI
                document.getElementById('description').innerHTML = node.description
                    .replace(/\n/g, '<br>')
                    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>'); // Convert markdown bold to HTML
                
                const choicesEl = document.getElementById('choices');
                choicesEl.innerHTML = '';
                
                node.choices.forEach((choice, index) => {
                    const button = document.createElement('button');
                    button.className = 'btn btn-outline-primary mb-2 w-100 text-start';
                    button.textContent = choice.text;
                    button.addEventListener('click', () => makeChoice(index));
                    choicesEl.appendChild(button);
                });
            } catch (error) {
                console.error('Error loading adventure node:', error);
                alert('Failed to load adventure. See console for details.');
            }
        }
        
        async function makeChoice(choiceIndex) {
            try {
                const response = await fetch(`${apiBaseUrl}/api/game/${gameStateId}/choice/${choiceIndex}`, {
                    method: 'POST'
                });
                
                if (!response.ok) {
                    throw new Error('Failed to process choice');
                }
                
                // Get updated game state
                const gameStateResponse = await fetch(`${apiBaseUrl}/api/game/${gameStateId}`);
                if (gameStateResponse.ok) {
                    const gameState = await gameStateResponse.json();
                    
                    // Get updated character
                    const characterResponse = await fetch(`${apiBaseUrl}/api/game/character/${gameState.characterId}`);
                    if (characterResponse.ok) {
                        character = await characterResponse.json();
                            }
                        }
                
                // Load next node
                await loadCurrentNode();
                updateCharacterPanel();
            } catch (error) {
                console.error('Error making choice:', error);
                alert('Failed to process choice. See console for details.');
            }
        }
        
                async function interactWithNPC(npcId, interactionType, dialogId = null) {
                    try {
                        const response = await fetch(`${apiBaseUrl}/api/game/${gameStateId}/interact-npc`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                npcId: npcId,
                                interactionType: interactionType,
                                dialogId: dialogId
                            })
                        });

                        if (!response.ok) {
                            throw new Error('Failed to interact with NPC');
                        }

                        const node = await response.json();

                        // Update the UI with the NPC interaction
                        document.getElementById('description').innerHTML = node.description;

                        // Clear previous choices
                        const choicesDiv = document.getElementById('choices');
                        choicesDiv.innerHTML = '';

                        // Add new choices
                        node.choices.forEach((choice, index) => {
                            const button = document.createElement('button');
                            button.className = 'btn btn-outline-primary m-2';
                            button.textContent = choice.text;

                            // Check if this is an NPC dialog option
                            if (choice.effects && choice.effects.NPCDialogOption !== undefined) {
                                button.onclick = () => handleNPCDialogOption(
                                    npcId,
                                    choice.effects.NPCDialogId,
                                    parseInt(choice.effects.NPCDialogOption)
                                );
            } else {
                                button.onclick = () => makeChoice(index);
                            }

                            choicesDiv.appendChild(button);
                        });
                    } catch (error) {
                        console.error('Error interacting with NPC:', error);
                        alert('Failed to interact with NPC. See console for details.');
                    }
                }

                async function handleNPCDialogOption(npcId, dialogId, optionIndex) {
                    // This would need to be implemented to handle dialog navigation
                    console.log(`Selected dialog option ${optionIndex} for dialog ${dialogId} with NPC ${npcId}`);

                    // You would call interactWithNPC again with the new dialogId
                    // that the option points to, but you'd need to get that information first
                }

                function updateCharacterPanel() {
                    document.getElementById('char-name').textContent = character.name;
                    document.getElementById('char-details').innerHTML =
                        `Level ${character.level} ${character.race} ${character.class}<br>` +
                        `HP: ${character.healthPoints}/${character.maxHealthPoints}`;
                    const attrsList = document.getElementById('char-attributes');
                    attrsList.innerHTML = '';

                    Object.entries(character.attributes).forEach(([attr, value]) => {
                        const li = document.createElement('li');
                        li.className = 'list-group-item d-flex justify-content-between';
                        li.innerHTML = `<span>${attr}</span><span>${value}</span>`;
                        attrsList.appendChild(li);
                });

                    const invList = document.getElementById('char-inventory');
                    invList.innerHTML = '';

                    if (character.inventory.length === 0) {
                        const li = document.createElement('li');
                        li.className = 'list-group-item';
                        li.textContent = 'Empty';
                        invList.appendChild(li);
                    } else {
                        character.inventory.forEach(item => {
                            const li = document.createElement('li');
                            li.className = 'list-group-item';
                            li.textContent = item;
                            invList.appendChild(li);
                        });
            }
        }

        // Map functionality
        let currentMapId = '';
        let currentX = 0;
        let currentY = 0;
        let currentMapName = '';
        let currentPOIs = [];
        let selectedPOI = null;

        // Initialize map tab
        document.getElementById('map-tab').addEventListener('click', loadMapData);

        // Direction buttons
        document.getElementById('btn-map-north').addEventListener('click', () => moveCharacter('North'));
        document.getElementById('btn-map-east').addEventListener('click', () => moveCharacter('East'));
        document.getElementById('btn-map-south').addEventListener('click', () => moveCharacter('South'));
        document.getElementById('btn-map-west').addEventListener('click', () => moveCharacter('West'));

        async function loadMapData() {
            try {
                // Get character's current location
                const response = await fetch(`${apiBaseUrl}/api/map/location/${character.id}`);

                if (!response.ok) {
                    throw new Error('Failed to load map data');
                }

                const locationData = await response.json();

                currentMapId = locationData.mapId;
                currentX = locationData.x;
                currentY = locationData.y;
                currentMapName = locationData.mapName;

                // Update map display
                document.getElementById('map-name').textContent = currentMapName;

                // Get map display
                const mapDisplayResponse = await fetch(`${apiBaseUrl}/api/map/${character.id}`);

                if (mapDisplayResponse.ok) {
                    const mapDisplay = await mapDisplayResponse.text();
                    document.getElementById('map-display').textContent = mapDisplay;
                }

                // Update location info
                updateLocationInfo(locationData);

                // Load points of interest
                loadPointsOfInterest();
            } catch (error) {
                console.error('Error loading map data:', error);
                alert('Failed to load map data. See console for details.');
            }
        }

        function updateLocationInfo(locationData) {
            const locationInfo = document.getElementById('location-info');

            locationInfo.innerHTML = `
                <h6>${locationData.locationName || 'Unknown location'}</h6>
                <p><strong>Terrain:</strong> ${locationData.terrainType}</p>
                <p>${locationData.description}</p>
                <p><strong>Coordinates:</strong> (${locationData.x}, ${locationData.y})</p>
            `;
        }

        async function loadPointsOfInterest() {
            try {
                // Get POIs at current location
                const response = await fetch(`${apiBaseUrl}/api/map/explore/${character.id}`);

                if (!response.ok) {
                    throw new Error('Failed to load exploration data');
                }

                const explorationData = await response.json();

                // Update POI list
                const poiList = document.getElementById('poi-list');
                poiList.innerHTML = '';

                // Check if there's an NPC
                if (explorationData.hasNPC) {
                    const npcDiv = document.createElement('div');
                    npcDiv.className = 'card mb-2 poi-card';
                    npcDiv.innerHTML = `
                        <div class="card-body">
                            <h6 class="card-title">${explorationData.npcInfo.name}</h6>
                            <p class="card-text">${explorationData.npcInfo.description}</p>
                            <button class="btn btn-sm btn-outline-primary interact-npc" data-npc-id="${explorationData.npcInfo.id}">Talk</button>
                        </div>
                    `;
                    poiList.appendChild(npcDiv);
                }

                // Check if there's a point of interest
                if (explorationData.hasPointOfInterest) {
                    const poiDiv = document.createElement('div');
                    poiDiv.className = 'card mb-2 poi-card';
                    poiDiv.innerHTML = `
                        <div class="card-body">
                            <h6 class="card-title">${explorationData.pointOfInterestInfo.name}</h6>
                            <p class="card-text">${explorationData.pointOfInterestInfo.description}</p>
                            <button class="btn btn-sm btn-outline-primary interact-poi" data-poi-id="${explorationData.pointOfInterestInfo.id}">Examine</button>
                        </div>
                    `;
                    poiList.appendChild(poiDiv);
                }

                // Check if there's a structure
                if (explorationData.hasStructure) {
                    const structureDiv = document.createElement('div');
                    structureDiv.className = 'card mb-2 poi-card';
                    structureDiv.innerHTML = `
                        <div class="card-body">
                            <h6 class="card-title">${explorationData.structureInfo.name}</h6>
                            <p class="card-text">${explorationData.structureInfo.description}</p>
                            <button class="btn btn-sm btn-outline-primary interact-structure" data-structure-id="${explorationData.structureInfo.id}">Enter</button>
                        </div>
                    `;
                    poiList.appendChild(structureDiv);
                }

                // If no POIs found
                if (!explorationData.hasNPC && !explorationData.hasPointOfInterest && !explorationData.hasStructure) {
                    poiList.innerHTML = '<p>There\'s nothing of interest here.</p>';
                }

                // Add event listeners to interaction buttons
                document.querySelectorAll('.interact-poi').forEach(button => {
                    button.addEventListener('click', () => {
                        const poiId = button.getAttribute('data-poi-id');
                        showPOIActions(poiId);
                    });
                });

                document.querySelectorAll('.interact-npc').forEach(button => {
                    button.addEventListener('click', () => {
                        const npcId = button.getAttribute('data-npc-id');
                        startNPCInteraction(npcId);
                    });
                });

                document.querySelectorAll('.interact-structure').forEach(button => {
                    button.addEventListener('click', () => {
                        const structureId = button.getAttribute('data-structure-id');
                        enterStructure(structureId);
                    });
                });
            } catch (error) {
                console.error('Error loading points of interest:', error);
                alert('Failed to load points of interest. See console for details.');
            }
        }

        async function showPOIActions(poiId) {
            try {
                // Get POI details (this would be a new endpoint)
                const response = await fetch(`${apiBaseUrl}/api/map/poi/${poiId}`);

                if (!response.ok) {
                    throw new Error('Failed to load POI actions');
                }

                const poiData = await response.json();
                selectedPOI = poiData;

                // Show available actions
                const actionsDiv = document.getElementById('poi-actions');
                actionsDiv.innerHTML = `
                    <h6>Actions for ${poiData.name}</h6>
                    <div id="poi-action-buttons"></div>
                `;

                const actionButtons = document.getElementById('poi-action-buttons');

                poiData.availableActions.forEach(action => {
                    const button = document.createElement('button');
                    button.className = 'btn btn-sm btn-outline-primary me-2 mb-2';
                    button.textContent = action.name;
                    button.addEventListener('click', () => performPOIAction(poiId, action.name));
                    actionButtons.appendChild(button);
                });

                if (poiData.availableActions.length === 0) {
                    actionsDiv.innerHTML += '<p>No actions available.</p>';
                }
            } catch (error) {
                console.error('Error loading POI actions:', error);
                alert('Failed to load POI actions. See console for details.');
            }
        }

        async function performPOIAction(poiId, action) {
            try {
                const response = await fetch(`${apiBaseUrl}/api/map/interact/${character.id}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        pointOfInterestId: poiId,
                        action: action
                    })
                });

                if (!response.ok) {
                    throw new Error('Failed to perform action');
                }

                const result = await response.json();

                // Show result message
                alert(result.message);

                // Update inventory if items were gained or lost
                if (result.itemsGained.length > 0 || result.itemsLost.length > 0) {
                    // Refresh character data
                    const characterResponse = await fetch(`${apiBaseUrl}/api/game/character/${character.id}`);
                    if (characterResponse.ok) {
                        character = await characterResponse.json();
                        updateCharacterPanel();
                    }
                }

                // Refresh POI list
                loadPointsOfInterest();
            } catch (error) {
                console.error('Error performing POI action:', error);
                alert('Failed to perform action. See console for details.');
            }
        }

        async function moveCharacter(direction) {
            try {
                const response = await fetch(`${apiBaseUrl}/api/map/move/${character.id}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        direction: direction
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to move');
                }

                const result = await response.json();

                if (result.success) {
                    // Update coordinates
                    currentX = result.newX;
                    currentY = result.newY;

                    // Check if we moved to a new map
                    if (currentMapId !== result.newMapId) {
                        currentMapId = result.newMapId;
                        currentMapName = result.newMapName;
                        document.getElementById('map-name').textContent = currentMapName;
                    }

                    // Reload map display
                    const mapDisplayResponse = await fetch(`${apiBaseUrl}/api/map/${character.id}`);

                    if (mapDisplayResponse.ok) {
                        const mapDisplay = await mapDisplayResponse.text();
                        document.getElementById('map-display').textContent = mapDisplay;
                    }

                    // Load new location info
                    const locationResponse = await fetch(`${apiBaseUrl}/api/map/location/${character.id}`);

                    if (locationResponse.ok) {
                        const locationData = await locationResponse.json();
                        updateLocationInfo(locationData);
                    }

                    // Refresh POIs
                    loadPointsOfInterest();
                } else {
                    alert(result.message);
                }
            } catch (error) {
                console.error('Error moving character:', error);
                alert('Failed to move character. ' + error.message);
            }
        }

        async function startNPCInteraction(npcId) {
            try {
                const response = await fetch(`${apiBaseUrl}/api/npc/${npcId}/interact/${character.id}`);

                if (!response.ok) {
                    throw new Error('Failed to interact with NPC');
                }

                const dialogs = await response.json();

                // Switch to adventure tab to show the interaction
                document.getElementById('adventure-tab').click();

                // Update the adventure content with NPC dialog
                const descriptionDiv = document.getElementById('description');
                const choicesDiv = document.getElementById('choices');

                if (dialogs.length > 0) {
                    const dialog = dialogs[0]; // Take the first dialog as the initial one

                    descriptionDiv.innerHTML = `
                        <div class="npc-dialog">
                            <h5>${npcId}</h5>
                            <p>${dialog.text}</p>
                        </div>
                    `;

                    choicesDiv.innerHTML = '';

                    dialog.options.forEach((option, index) => {
                        const button = document.createElement('button');
                        button.className = 'btn btn-outline-primary m-2';
                        button.textContent = option.text;
                        button.onclick = () => handleNPCDialogOption(npcId, dialog.id, index);
                        choicesDiv.appendChild(button);
                    });
                } else {
                    descriptionDiv.innerHTML = `
                        <div class="npc-dialog">
                            <h5>${npcId}</h5>
                            <p>The NPC has nothing to say at the moment.</p>
                        </div>
                    `;
                    choicesDiv.innerHTML = '';
                }
            } catch (error) {
                console.error('Error interacting with NPC:', error);
                alert('Failed to interact with NPC. See console for details.');
            }
        }

        // Add this new import handling code
        document.getElementById('btn-import').addEventListener('click', async () => {
            const fileInput = document.getElementById('import-file');
            const file = fileInput.files[0];
            
            if (!file) {
                alert('Please select a file to import');
                return;
            }
            
            try {
                const reader = new FileReader();
                reader.onload = async (e) => {
                    try {
                        const importedData = JSON.parse(e.target.result);
                        
                        // Validate the imported data structure
                        if (!importedData.character || !importedData.world) {
                            throw new Error('Invalid import file structure');
                        }
                        
                        // Import world data first
                        const worldResponse = await fetch(`${apiBaseUrl}/api/world/import`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(importedData.world)
                        });
                        
                        if (!worldResponse.ok) {
                            throw new Error('Failed to import world data');
                        }
                        
                        const worldResult = await worldResponse.json();
                        
                        // Import character data
                        const characterResponse = await fetch(`${apiBaseUrl}/api/character/import`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                ...importedData.character,
                                worldId: worldResult.id // Link character to the imported world
                            })
                        });
                        
                        if (!characterResponse.ok) {
                            throw new Error('Failed to import character data');
                        }
                        
                        // Refresh the world list
                        await loadWorlds();
                        
                        // Select the imported world
                        worldSelect.value = worldResult.id;
                        // Trigger the change event to update the UI
                        worldSelect.dispatchEvent(new Event('change'));
                        
                        // Populate character form with imported data
                        populateCharacterForm(importedData.character);
                        
                        alert('Import successful!');
                    } catch (error) {
                        console.error('Error processing import:', error);
                        alert('Failed to process import file. Please check the file format.');
                    }
                };
                
                reader.readAsText(file);
            } catch (error) {
                console.error('Error reading import file:', error);
                alert('Failed to read import file');
            }
        });
        
        // Helper function to populate character form with imported data
        function populateCharacterForm(characterData) {
            document.getElementById('name').value = characterData.name;
            document.getElementById('race').value = characterData.race;
            document.getElementById('class').value = characterData.class;
            
            // Update attribute display
            document.getElementById('str-value').textContent = characterData.attributes.Strength;
            document.getElementById('dex-value').textContent = characterData.attributes.Dexterity;
            document.getElementById('con-value').textContent = characterData.attributes.Constitution;
            
            // Trigger class change to update equipment preview
            document.getElementById('class').dispatchEvent(new Event('change'));
        }
    </script>
}
